import "../utils/attendee.eol";

@test
operation testNoNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var s1 = new Seat;
	s1.attendee = a1;
	s1.number = 1;
	
	table.seats = OrderedSet{s1};

	var neighbors = a1.neighbors();
	assertTrue("Attendee should have no neighbors, has " + neighbors.size(), neighbors.isEmpty());
}

@test
operation testOneNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";
	var a2 = new Attendee;
	a2.name = "A2";
	
	var s1 = new Seat;
	var s2 = new Seat;
	s1.attendee = a1;
	s1.number = 1;
	s2.attendee = a2;
	s2.number = 2;
	
	table.seats = OrderedSet{s1, s2};
	
	var neighbors = a2.neighbors();
	assertTrue("Attendee should have 1 neighbor, has " + neighbors.size(), neighbors.size() == 1);
	assertTrue("Attendee neighbor is incorrect", neighbors.containsAll(Sequence{a1}));
}

@test
operation testTwoNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";
	var a2 = new Attendee;
	a2.name = "A2";
	var a3 = new Attendee;
	a3.name = "A3";
	var a4 = new Attendee;
	a3.name = "A4";	
	
	var s1 = new Seat;
	var s2 = new Seat;
	var s3 = new Seat;
	var s4 = new Seat;
	s1.attendee = a1;
	s1.number = 1;
	s2.attendee = a2;
	s2.number = 2;
	s3.attendee = a3;
	s3.number = 3;
	s4.attendee = a4;
	s4.number = 4;
	
	table.seats = OrderedSet{s1, s2, s3, s4};
	
	var neighbors = a2.neighbors();
	for (n in neighbors) {
		n.name.println();
		n.type.println();
	}
	assertTrue("Attendee should have 2 neighbor, has " + neighbors.size(), neighbors.size() == 2);
	assertTrue("Attendee has incorrect neighbors", neighbors.containsAll(Sequence{a1, a3}));
}

@test
operation testNameAndLocation() {
	var table = new Table;
	table.identifier = "Table1";
	var s = new Seat;
	var a = new Attendee;
	a.name = "A1";
	a.surname = "S1";
	
	s.attendee = a;
	table.seats = OrderedSet{s};
	
	assertTrue(a.nameAndLocation() == "A1 S1 at Table1");
}

@test
operation testFailedAllocateSeat() {
	var table = new Table;
	table.identifier = "Table1";
	
	var a = new Attendee;
	a.name = "A1";

	var s = new Seat;
	table.seats = OrderedSet{s};	
	
	assertFalse(a.allocateSeat());
}

@test
operation testFailedAllocateSeatComplex() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	var l2 = new Language;
	l2.name = "L2";
	
	uni.languages.add(l1);
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	
	uni.dinner.tables.add(table);
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l2);

	var s1 = new Seat;
	var s2 = new Seat;
	s1.attendee = a2;
	table.seats = OrderedSet{s1, s2};	
	
	assertFalse(a1.allocateSeat());
}

@test
operation testSuccessfulAllocateSeat() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	uni.languages.add(l1);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 2;
	
	uni.dinner.tables.add(table);

	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l1);
	
	var s1 = new Seat;
	s1.number = 1;
	s1.attendee = a2;
	var s2 = new Seat;
	s2.number = 2;
	table.seats = OrderedSet{s1, s2};	
	
	assertTrue(a1.allocateSeat());
	assertTrue(a1.seat == s2);
}

@test
operation testSatNextToDislikedSuccess() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 2;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	a1.dislikes.add(a2);
	
	var s1 = new Seat;
	s1.number = 1;
	s1.attendee = a1;
	var s2 = new Seat;
	s2.number = 2;
	s2.attendee = a2;
	table.seats = Sequence{s1, s2};
	
	assertTrue(a1.satNextToDisliked());
}

@test
operation testSatNextToDislikedSuccessComplex() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	a1.dislikes.add(a3);
	
	var s1 = new Seat;
	s1.number = 1;
	s1.attendee = a1;
	var s2 = new Seat;
	s2.number = 2;
	s2.attendee = a2;
	var s3 = new Seat;
	s3.number = 3;
	s3.attendee = a3;
	table.seats = Sequence{s1, s2, s3};
	
	assertTrue(a1.satNextToDisliked());
}

@test
operation testSatNextToDislikedFailedComplex() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";	
	
	a1.dislikes.add(a3);
	
	var s1 = new Seat;
	s1.number = 1;
	s1.attendee = a1;
	var s2 = new Seat;
	s2.number = 2;
	s2.attendee = a2;
	var s3 = new Seat;
	s3.number = 3;
	s3.attendee = a3;
	var s4 = new Seat;
	s4.number = 4;
	s4.attendee = a4;
	table.seats = Sequence{s1, s2, s3, s4};
	
	assertFalse(a1.satNextToDisliked());
}

@test
operation testNeighborsSpeakCommonLanguageSuccess() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	uni.languages.add(l1);
	
	var l2 = new Language;
	l2.name = "L2";
	
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l1);
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";
	a1.languages.add(l2);	
	
	var s1 = new Seat;
	s1.number = 1;
	s1.attendee = a1;
	var s2 = new Seat;
	s2.number = 2;
	s2.attendee = a2;
	var s3 = new Seat;
	s3.number = 3;
	s3.attendee = a3;
	var s4 = new Seat;
	s4.number = 4;
	s4.attendee = a4;
	table.seats = Sequence{s1, s2, s3, s4};
	
	assertTrue(a1.neighborsSpeakCommonLanguage());	
}

@test
operation testNeighborsSpeakCommonLanguageFailed() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	var l2 = new Language;
	l2.name = "L2";	
	
	uni.languages.add(l1);
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l2);
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";	
	
	var s1 = new Seat;
	s1.number = 1;
	var s2 = new Seat;
	s2.number = 2;
	var s3 = new Seat;
	s3.number = 3;
	var s4 = new Seat;
	s4.number = 4;
	table.seats = Sequence{s1, s2, s3, s4};
	
	assertFalse(a1.neighborsSpeakCommonLanguage());	
}

@test
operation testAllNeighbors() {
	var t1 = new Table;
	var t2 = new Table;
	
	var s1 = new Seat;
	s1.number = 1;
	
	var s2 = new Seat;
	s2.number = 2;
	
	var s12 = new Seat;
	s12.number = 1;
	
	var s22 = new Seat;
	s22.number = 2;
	
	t1.seats = Sequence{s1, s2};
	t2.seats = Sequence{s12, s22};
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	s1.attendee = a1;
	s2.attendee = a2;
	
	var a3 = new Attendee;
	a3.name = "A3";
	
	s12.attendee = a3;
	
	assertTrue(a1.allNeighbors().size() == 1);
}