import "../utils/attendee.eol";

@test
operation testNoNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";

	table.attendees = OrderedSet{a1};

	var neighbors = a1.neighbors();
	assertTrue("Attendee should have no neighbors, has " + neighbors.size(), neighbors.isEmpty());
}

@test
operation testOneNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";
	var a2 = new Attendee;
	a2.name = "A2";
	
	table.attendees = OrderedSet{a1, a2};
	
	var neighbors = a2.neighbors();
	assertTrue("Attendee should have 1 neighbor, has " + neighbors.size(), neighbors.size() == 1);
	assertTrue("Attendee neighbor is incorrect", neighbors.containsAll(Sequence{a1}));
}

@test
operation testTwoNeighbors() {
	var table = new Table;
	
	var a1 = new Attendee;
	a1.name = "A1";
	var a2 = new Attendee;
	a2.name = "A2";
	var a3 = new Attendee;
	a3.name = "A3";
	var a4 = new Attendee;
	a3.name = "A4";	
	
	table.attendees = OrderedSet{a1, a2, a3, a4};
	
	var neighbors = a2.neighbors();
	assertTrue("Attendee should have 1 neighbor, has " + neighbors.size(), neighbors.size() == 2);
	assertTrue("Attendee has incorrect neighbors", neighbors.containsAll(Sequence{a1, a3}));
}

@test
operation testNameAndLocation() {
	var table = new Table;
	table.identifier = "Table1";
	var a = new Attendee;
	a.name = "A1";
	
	table.attendees = OrderedSet{a};
	
	assertTrue(a.nameAndLocation() == "A1 at Table1");
}

@test
operation testFailedAllocateSeat() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a = new Attendee;
	a.name = "A1";
	
	assertFalse(a.allocateSeat());
}

@test
operation testFailedAllocateSeatComplex() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	var l2 = new Language;
	l2.name = "L2";
	
	uni.languages.add(l1);
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	uni.dinner.tables.add(table);
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l2);

	table.attendees = OrderedSet{a2};	
	
	assertFalse(a1.allocateSeat());
}

@test
operation testSuccessfulAllocateSeat() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	uni.languages.add(l1);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 2;
	
	var table2 = new Table;
	table2.identifier = "Table2";
	table2.capacity = 2;
	
	uni.dinner.tables.add(table);
	uni.dinner.tables.add(table2);
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l1);
	
	table.attendees = OrderedSet{a2};	
	
	assertTrue(a1.allocateSeat());
	assertTrue(a1.table == table);
}

@test
operation testSatNextToDislikedSuccess() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 2;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	a1.dislikes.add(a2);
	
	table.attendees.add(a1);
	table.attendees.add(a2);
	
	assertTrue(a1.satNextToDisliked());
}

@test
operation testSatNextToDislikedSuccessComplex() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	a1.dislikes.add(a3);
	
	table.attendees.add(a1);
	table.attendees.add(a2);
	table.attendees.add(a3);
	
	assertTrue(a1.satNextToDisliked());
}

@test
operation testSatNextToDislikedFailedComplex() {
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	
	var a2 = new Attendee;
	a2.name = "A2";
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";	
	
	a1.dislikes.add(a3);
	
	table.attendees.add(a1);
	table.attendees.add(a2);
	table.attendees.add(a3);
	table.attendees.add(a4);
	
	assertFalse(a1.satNextToDisliked());
}

@test
operation testNeighborsSpeakCommonLanguageSuccess() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	uni.languages.add(l1);
	
	var l2 = new Language;
	l2.name = "L2";
	
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l1);
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";
	a1.languages.add(l2);	
	
	table.attendees.addAll(Sequence{a1, a2, a3, a4});
	
	assertTrue(a1.neighborsSpeakCommonLanguage());	
}

@test
operation testNeighborsSpeakCommonLanguageFailed() {
	var uni = new Universe;
	uni.dinner = new Dinner;
	
	var l1 = new Language;
	l1.name = "L1";
	
	var l2 = new Language;
	l2.name = "L2";	
	
	uni.languages.add(l1);
	uni.languages.add(l2);
	
	var table = new Table;
	table.identifier = "Table1";
	table.capacity = 3;
	
	var a1 = new Attendee;
	a1.name = "A1";
	a1.languages.add(l1);
	
	var a2 = new Attendee;
	a2.name = "A2";
	a2.languages.add(l2);
	
	var a3 = new Attendee;
	a3.name = "A3";	
	
	var a4 = new Attendee;
	a4.name = "A4";	
	
	table.attendees.addAll(Sequence{a1, a2, a3, a4});
	
	assertFalse(a1.neighborsSpeakCommonLanguage());	
}