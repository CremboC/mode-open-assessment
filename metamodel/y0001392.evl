import "../utils/attendee.eol";
import "../utils/table.eol";

context Universe {

	// C1.3
	constraint HasAttendees {
		check : not Attendee.all.isEmpty()
		message : "Conference dinner as no attendees."
	}
}

context Attendee {
	
	// C2.2
	constraint SatNextToCommonLanguage {
		guard : self.satisfies("IsNotAlone")
		check {
			return self.neighborsSpeakCommonLanguage();
		}
		message : "Attendee (" + self.nameAndLocation() + ") should be sat next to a person with at least one common language."
	}

	// C2.3
	constraint SpeaksAtLeastOneLanguage {
		check : self.languages.notEmpty()
		message : "Attendee (" + self.nameAndLocation() + ") must speak at least one language."
		
		fix {
			title : "Add a language to add"
			do {
				var languages = UserInput.chooseMany("Select some langauges", Language.all);
				self.languages = languages;
			}
		}
	}
	
	// C2.4
	constraint DoesntLikeSelf {
		check : self.likes.excludes(self)
		message : "Attendee (" + self.name + ") cannot prefer to sit with himself."
		
		fix {
			title : "Remove self from liked persons list"
			do {
				self.likes = self.likes.excluding(self);
			}
		}
	}
	
	// C2.5
	constraint DoesntDislikeSelf {
		check : self.dislikes.excludes(self)
		message : "Attendee (" + self.name + ") cannot dislike himself."
		
		fix {
			title : "Remove self from disliked persons list"
			do {
				self.dislikes = self.dislikes.excluding(self);
			}
		}		
	}
	
	// C2.6
	constraint HasName {
		check : self.name <> null and self.name <> ""
		message : "An attendee must have a name."
		
		fix {
			title : "Set name"
			do {
				var name : String;
				var surname : String;
				while (name == "") {
					name = UserInput.prompt("Please enter this attendee's first name:");
				}
				surname = UserInput.prompt("And his surname: (leave blank not applicable)");
				self.name = name;
				self.surname = surname;
			}
		}
	}
	
	// C2.7
	constraint IsNotAlone {
		check : self.neighbors().size() > 0
		message : "Attendee (" + self.nameAndLocation() + ") should not be sat alone."
		
		fix {
			title : "Allocate new seat"
			do {
				if (self.allocateSeat()) {
					UserInput.inform("Allocated " + self.nameAndLocation());
				} else {
					UserInput.inform("Failed to find a seat that satisfies the constraints.");
				}
			}
		}
	}
	
	// Q2.1
	critique SatNextToDisliked {
		guard : self.satisfies("IsNotAlone")
		check : not self.neighbors().exists(a|self.dislikes.contains(a))
		message {
			var person = self.neighbors().select(a|self.dislikes.contains(a)).first();
			return "Attendee (" + self.nameAndLocation() + ") is sat next to a person he dislikes (" + person.name + ")";
		}
	}
	
	// Q2.2
	critique NotSatNextToLiked {
		guard : self.satisfies("IsNotAlone") and not self.likes.isEmpty()
		check : self.neighbors().exists(a|self.likes.contains(a))
		message : "Attendee (" + self.nameAndLocation() + ") has a seating preference which is not honoured." 
	}
}

context Table {
	// C3.1 
	constraint DoesNotExceedCapacity {
		check : self.attendees.size() <= self.capacity
		message : "Table (" + self.identifier + ") exceeds capacity: " + self.attendees.size() + " out of " + self.capacity
		
		fix {
			title : "Update capacity to match number of attendees"
			do {
				self.capacity = self.attendees.size();
			}
		}
	}
	
	// C3.2
	constraint IsOccupied {
		check : not self.attendees.isEmpty()
		message : "Table (" + self.identifier + ") is unoccupied."
		
		fix {
			title : "Delete table"
			do {
				var dinner = Universe.all.first().dinner;
				var oldIdentifier = self.id;
				dinner.tables = dinner.tables.excluding(self);
				
				if (dinner.tables.excludes(self)) {
					UserInput.inform("Table (" + oldIdentifier + ") has been deleted.");
				}
			}
		}
	}
	
	// C3.3
	constraint HasUniqueIdentifier {
		check : Table.all.excluding(self).identifier.excludes(self.identifier)
		message : "Table (" + self.identifier + ") identifier is not unique."
		
		fix {
			title : "Update table name"
			do {
				self.requestUniqueIdentifier();
			}
		}
	}
	
	// Q3.1
	critique CapacityMismatched {
		guard : self.satisfies("DoesNotExceedCapacity")
		check : self.attendees.size() == self.capacity
		message : "Table (" + self.identifier + ") has capacity of " + self.capacity + " but only " + self.attendees.size() + " seats."
		
		fix {
			title : "Reduce capacity to match number of seats"
			do {
				self.capacity = self.attendees.size();
			}
		}
	}
	
	// Q3.2
	critique NoName {
		check : self.identifier <> null and self.identifier <> ""
		message : "Table (" + self.identifier + ") has no identifier. It is recommended to add one."
		fix {
			title : "Set an identifier"
			do {
				self.requestUniqueIdentifier();
			}
		}
	}
}

context Language {
	
	// C4.1
	constraint HasName {
		check : self.name <> null and self.name <> ""
		message : "Institution must have a name set"
		
		fix {
			title : "Set name for language"
			do {
				var name : String;
				while (name == "") {
					name = UserInput.prompt("Enter language name:");
				}
				self.name = name;
			}
		}
	}
	
	// Q4.1
	critique IsUsed {
		check {
			var used = Attendee.all.languages.flatten().asSet();
			return used.contains(self);
		}
		message : "Language " + self.name + " is not spoken by any attendee."
		
		fix {
			title : "Delete language"
			do {
				var universe = Universe.all.first();
				var name = self.name;
				universe.languages = universe.languages.excluding(self);
				if (universe.languages.excludes(self)) {
					UserInput.inform("Language " + name + " deleted");
				}
			}
		}
	}
}

context Institution {
	// C5.1
	constraint HasName {
		check : self.name <> null and self.name <> ""
		message : "Institution must have a name set"
		
		fix {
			title : "Set name for institution"
			do {
				var name : String;
				while (name == "") {
					name = UserInput.prompt("Enter institution name:");
				}
				self.name = name;
			}
		}
	}
	
	// Q5.1
	critique IsRepresented {
		check {
			var represented = Attendee.all.affiliation.asSet();
			return represented.contains(self); 
		}
		message : "Institution " + self.name + " is not represented by any attendee."
		
		fix {
			title : "Delete institution"
			do {
				var universe = Universe.all.first();
				var name = self.name;
				universe.institutions = universe.institutions.excluding(self);
				if (universe.institutions.excludes(self)) {
					UserInput.inform("Institution " + name + " deleted");
				}
			}
		}
	}
}

context Dinner {
	// Q6.1
	critique NoName {
		check : self.name <> null and self.name <> ""
		message : "Conference dinner has no title. It is highly recommended to add one."
		
		fix {
			title : "Add conference title"
			do {
				var name : String;
				while (name == "") {
					name = UserInput.prompt("Enter conference title:");
				}
				self.name = name;
			}
		}
	}
}