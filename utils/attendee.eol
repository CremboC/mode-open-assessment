import "table.eol";

// returns immediate neighbors (left and right)
operation Attendee neighbors() : Set<Attendee> {
	if (self.table == null) {
		return Set{};
	}
	var attendees = self.table.attendees;
	var length = attendees.size();
	var index = attendees.indexOf(self);
	
	var nextIndex = index + 1;
	if (nextIndex == length) { 
		nextIndex = 0;
	}
	
	var previousIndex = index - 1;
	if (previousIndex == -1) {
		previousIndex = length - 1;
	}
	
	var nextPerson = attendees.at(nextIndex);
	var previousPerson = attendees.at(previousIndex);
	
	var neighbors : Set<Attendee>;
	if (nextPerson <> null) neighbors.add(nextPerson);
	if (previousPerson <> null) neighbors.add(previousPerson);
	
	return neighbors.excluding(self);
}

// returns all people in the same table
operation Attendee allNeighbors() : Set<Attendee> {
	return self.table.attendees.excluding(self);
}

operation Attendee nameAndLocation() : String {
	return self.fullName() + " at " + self.table.identifier;
}

operation Attendee allocateSeat() : Boolean {
	var available = Table.all.select(t|t.capacity > t.attendees.size()).sortBy(t|t.attendees.size());
	var original = self.table; // store self's copy so that if the search fails, we restore the initial state.
	
	for (table in available) {
		self.table = table;
		if (self.neighborsSpeakCommonLanguage()) {
			return true;
		}
	}
	
	self.table = original;
	return false;
}

operation Attendee neighborsSpeakCommonLanguage() : Boolean {
	// Get all the languages of the neighbors into a single list, 
	// and check if at least one of the is spoken by the current attendee.
	// Note the list of languages is not unique, but it does not matter.
	return self.neighbors().languages.flatten().exists(l|self.languages.contains(l));
}

operation Attendee fullName() {
	var append = " " + self.surname;
	if (self.surname == "" or self.surname == null) {
		append = "";
	}
	return self.name + append;
}

operation Attendee safeName() : String {
	return self.fullName().toLowerCase.replace(" ", "-");
}

operation Attendee satNextToDisliked() : Boolean {
	return self.neighbors().exists(a|self.dislikes.contains(a));
}

operation Attendee satNextToLiked() : Boolean {
	if (self.likes.isEmpty()) {
		return true;
	}
	return self.neighbors().exists(a|self.likes.contains(a));
}

operation Attendee seatNumber() : Integer {
	return self.table.attendees.indexOf(self) + 1;
}