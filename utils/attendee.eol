import "table.eol";
import "sequence.eol";

// returns immediate neighbors (left and right)
operation Attendee neighbors() : Set<Attendee> {
	if (self.seat == null) return Set{};
	
	var seats = self.seat.table.seats;
	var seatNumbers = seats.number;
	var myNumber = self.seat.number;
	var neighborNumbers = (myNumber - 1)
		.to(myNumber + 1)
		.clamp(seatNumbers.min(), seatNumbers.max())
		.excluding(myNumber)
		.asSet();
	
	var neighbors = seats.select(s|neighborNumbers.contains(s.number)).attendee;
	return neighbors.reject(n|n == null).asSet();
	
}

// returns all people in the same table
operation Attendee allNeighbors() : Set<Attendee> {
	return self.seat.table.seats.attendee.excluding(self).reject(a|a == null).asSet();
}

operation Attendee nameAndLocation() : String {
	var end : String;
	if (self.seat <> null) {
		end = " at " + self.seat.table.identifier;
	}
	return self.fullName() + end;
}

operation Attendee allocateSeat() : Boolean {
	// get all seats which are not allocated and sorts them so that the seats with most number of attendees
	// nearby are first
	var available = Seat.all.select(s|s.attendee == null).sortBy(s|s.table.attendees().size());
	var originalSeat = self.seat; // store self's copy so that if the search fails, we restore the initial state.
	
	for (seat in available) {
		self.seat = seat;
		if (self.neighborsSpeakCommonLanguage()) {
			return true;
		}
	}
	
	self.seat = originalSeat;
	return false;
}

operation Attendee neighborsSpeakCommonLanguage() : Boolean {
	// Get all the languages of the neighbors into a single list, 
	// and check if at least one of the is spoken by the current attendee.
	// Note the list of languages is not unique, but it does not matter.
	return self.neighbors().languages.flatten().exists(l|self.languages.contains(l));
}

operation Attendee fullName() {
	var append = " " + self.surname;
	if (self.surname == "" or self.surname == null) {
		append = "";
	}
	return self.name + append;
}

operation Attendee safeName() : String {
	return self.fullName().toLowerCase.replace(" ", "-");
}

operation Attendee satNextToDisliked() : Boolean {
	return self.neighbors().exists(a|self.dislikes.contains(a));
}

operation Attendee satNextToLiked() : Boolean {
	if (self.likes.isEmpty()) {
		return true;
	}
	return self.neighbors().exists(a|self.likes.contains(a));
}